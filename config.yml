# yaml-language-server: $schema=https://app.stainless.com/config.schema.json
organization:
  # branch 1 2 3 4
  name: cjquines-prod-19
  docs: ""
  # main 1 2
  contact: ""

# `targets` define the output targets and their customization options, such as
# whether to emit the Node SDK and what it's package name should be.
targets:
  typescript:
    package_name: cjquines-prod-19
    production_repo: null
    publish:
      npm: false

# `environments` are a map of the name of the environment (e.g. "sandbox",
# "production") to the corresponding url to use.
environments:
  production: https://petstore3.swagger.io/api/v3

# `resources` define the structure and organization for your API, such as how
# methods and models are grouped together and accessed. See the [configuration
# guide] for more information.
#
# [configuration guide]: https://app.stainless.com/docs/guides/configure#resources
resources:
  pet:
    # Configure the models--named types--defined in the resource. Each key in the
    # object is the name of the model and the value is either the name of a schema in
    # `#/components/schemas` or an object with more detail.
    #
    # [reference]: https://app.stainless.com/docs/reference/config#model
    models:
      pet: "#/components/schemas/Pet"
      category: "#/components/schemas/Category"
    # Configure the methods defined in this resource. Each key in the object is the
    # name of the method and the value is either an endpoint (for example, `get /foo`)
    # or an object with more detail.
    #
    # [reference]: https://app.stainless.com/docs/reference/config#method
    methods:
      update: put /pet
      create: post /pet
      find_by_status: get /pet/findByStatus
      find_by_tags: get /pet/findByTags
      retrieve: get /pet/{petId}
      update_by_id: post /pet/{petId}
      delete: delete /pet/{petId}
      upload_image:
        endpoint: post /pet/{petId}/uploadImage
        body_param_name: image

  store:
    methods:
      list_inventory: get /store/inventory
    # Subresources define resources that are nested within another for more powerful
    # logical groupings, e.g. `cards.payments`.
    subresources:
      order:
        methods:
          create: post /store/order
          retrieve: get /store/order/{orderId}
          delete: delete /store/order/{orderId}

  user:
    models:
      user: User
    methods:
      create: post /user
      create_with_list:
        endpoint: post /user/createWithList
        body_param_name: items
      login: get /user/login
      logout: get /user/logout
      retrieve: get /user/{username}
      update: put /user/{username}
      delete: delete /user/{username}

  $shared:
    models:
      order: "#/components/schemas/Order"

settings:
  # All generated integration tests that hit the prism mock http server are marked
  # as skipped. Removing this setting or setting it to false enables tests, but
  # doing so may result in test failures due to bugs in the test server.
  #
  # [prism mock http server]: https://stoplight.io/open-source/prism
  disable_mock_tests: true
  license: Apache-2.0

# `client_settings` define settings for the API client, such as extra constructor
# arguments (used for authentication), retry behavior, idempotency, etc.
client_settings:
  opts:
    api_key:
      type: string
      auth:
        security_scheme: api_key
      read_env: PETSTORE_API_KEY

# `query_settings` determines how complex queries (nested objects, arrays) are
# serialized.
query_settings:
  nested_format: brackets
  array_format: comma

# `readme` is used to configure the code snippets that will be rendered in the
# README.md of various SDKs. In particular, you can change the `headline`
# snippet's endpoint and the arguments to call it with.
readme:
  example_requests:
    default:
      type: request
      endpoint: get /store/inventory
      params: {}
    headline:
      type: request
      endpoint: post /store/order
      params:
        petId: 1
        quantity: 1
        status: placed
